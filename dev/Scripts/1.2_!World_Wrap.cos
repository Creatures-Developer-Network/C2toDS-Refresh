* This file has scripts for:
*1 5 50200 - World Wrap Camera
*1 6 50200 - World Wrap Grabber
*5 7 50200 - Mouse Pointer Tracker (moved to family 5 so that DS can't pause it by default)
*1 7 50201 - Window Resize Camera Builder
*1 7 50202 - World Wrap Shout Object (used so objects can shout their CATO across the wrap for norns to hear + as a temporary object that emits creature babble (audio) over the wrap). ALSO used for mirrored clones of the Norn/Attention indicators.
*1 7 50203 - World Wrap Mirror Object
*1 7 50204 - Are creatures near the wrap? check every 100 ticks
*1 7 50205 - An object other object scripts can target to let norns hear them over the wrap (if you change this classifier number, you will break several objects!!)

* This file also adds a new creature script to redirect actions on mirror objects onto their real world counterparts:
*scrp 4 0 0 50200





*NeoDement:
*-We are now ETCHing all objects (0 0 0) instead of just objects in family 2 (2 0 0). This means creatures now transport properly through the wrap.
*-The world wrap now handles hand holding properly.
*-Creatures can hear Hand and Agent Help speech over the wrap.
*-Creatures can now hear each other talking over the wrap. (update: now their voice carries over so the hand can hear the creature babble too)
*-Creatures can now see objects over the wrap. This works by creating a small invisible object with the same Category as the original, offset to the other side of the world. It even works for the pointer and creatures!
*-Interactions with these mirror objects will redirect to the same interactions on the original object. This is to account for objects that are near the wrap but can still be reached without the creature walking through.
*-Duplicates of the DS object of attention and norn indicators copy the position and frame of the real ones every tick (while in the C2toDS room). This means they don't disappear when the pointer goes over the wrap.

*(you can visualize a bunch of stuff by searching for "debug:")


*Possible future optimizations:

*can we replace global "AreNornsNearWrap?" variable with an OV on all relevant objects?
*move all game variables into OVs when initializing objects so we're not doing tons of string comparisons every frame
*move as much stuff as possible to subroutines for readability and perf (a jump is more efficient than a doif!)
*would a few doifs be more efficient than the division performed everytime a wrap object is refreshed?
*some of the checks check for +/- 500 from the wrap point when they probably really don't need to. if it's touching the Grabber, that's probably enough.






*some benchmarks (a bit outdated)


*world of 16 norns (no wrap): 206.4
*
*200-250-166-250-166

*
*wrap installed (camera in room): 156.4
*142-142-166-166-166
*
*wrap installed (camera not in room): 193.2
*200-200-200-166-200
*
*wrap installed (norns near wrap): 140.6
*111-142-142-166-142
*
*average of all wrap data: 163.4

*so an average perf decrease of ~43fps... not too shabby!







*OVs currently in use:

*MIRROR OBJECTS*
*
*OV00 - ORIGINAL AGENT (real world counterpart)
*OV01 - OFFSET (reapplied during timer script if a creature is focusing on it)



*POINTER TRACKER*
*
*OV01 - NORN INDICATOR CLONE
*OV02 - ATTENTION INDICATOR CLONE



*CAMERA*
*
*OV00 - WHERE IS THE CAMERA POINTED? (x)
*OV04 - WHERE IS THE CAMERA POINTED? (y)











*CA links for the "wrap" rooms.*

*Atmosphere

link grap 2070 47640 grap 10375 47640 100

*Desert Beach

link grap 2070 48090 grap 10375 48090 100

*Biome 1

link grap 2070 48340 grap 10375 48340 100

*Bome 2

link grap 2070 48822 grap 10375 48822 100

*Machines to Volcano

link grap 2070 49340 grap 10375 49340 100

*----------------------*

*Yggdrasil to Desert

link grap 12950 47678 grap 4890 48110 100



*Set the game variables for easy reference.*

setv game "C2toDS_Top" 47600

setv game "C2toDS_Right" 12448

*unused
*setv game "C2toDS_Left" 0

*unused
*setv game "C2toDS_Bottom" 49999

setv game "C2toDS_RoomID" gmap 6753 48383

setv game "C2toDS_WrapLeft" 2047

setv game "C2toDS_WrapRight" 10399


*how often will pieces of the wrap check for objects that have passed through them?
*turn this number down to improve how quickly the wrap moves objects to the other side
*this will cause a performance hit on low numbers!
setv game "C2toDS_WrapTickRate" 16



* Wrap padding determines how many panels are pushed back onto the actual non-wrapped part of the world
setv game "C2toDS_WrapPadding" 1

* Wrap Offset - how many pixels to add or remove from an X coordinate to get its wrapped equivalent?
setv game "C2toDS_WrapOffset" 8352



*--//--References---*

*10399 is the point of wrap on the RIGHT side of the map.*

*2048 is the point of wrap on the LEFT side of the map.*

*--//---------------*




*Set up camera heights and widths for easy change.*

*They are 400 wide, 300 high.  This helps for 800x600 displays, the minimum size for Creatures.*

setv game "C2toDS_CamWidth" 400

setv game "C2toDS_CamHeight" 300

*----------------------------------------------------------------------------------*


inst


*Are creatures near the wrap? check every 100 ticks

new: simp 1 7 50204 "blank" 1 0 1

*reaaally make sure norns cant see it
attr 16

accg 0

tick 100

fric 100

aero 0



*----------------------------------------------------------------------------------*


*An object other object scripts can target to let norns hear them over the wrap

new: simp 1 7 50205 "blank" 1 0 1

*reaaally make sure norns cant see it
attr 16

accg 0

fric 100

aero 0





*----------------------------------*

*make clones of Norn/Attention Indicators


new: simp 1 7 50202 "indicator" 11 10 8300
attr 272
seta va54 targ

new: simp 1 7 50202 "attention" 11 0 8300
attr 272
seta va55 targ


*----------------------------------*



*mouse pointer tracker

new: simp 5 7 50200 "blank" 1 0 1

*reaaally make sure norns cant see it
attr 16

accg 0

tick 1

fric 100

aero 0

*listen for Raw Key Down (1) + Raw Mouse Down (8). We use them to intercept speech and agent help clicks.
imsk 9


*store reference to the indicators for easy switching
seta ov01 va54
seta ov02 va55




*----------------------------------*

* Window resize watcher/ camera builder

*todo:
*NOTE: THIS DOESNT WORK IN FULL SCREEN MODE!

new: simp 1 7 50201 "blnk" 1 0 0

*reaaally make sure norns cant see it
attr 16

* Delay init or right side panels will not be created properly

tick 40


*----------------------------------*


*-Inject the Cameras and Wrap Pieces-*

*Window Resize Camera Builder - Window Resized Script

scrp 1 7 50201 123
	tick 80
endm


*Window Resize Camera Builder - Timer Script (called after a delay by Window Resized script)

scrp 1 7 50201 9

	inst

	lock

	doif wndw eq name "CamWidth::last"

		tick 0

		unlk

*		stop

	endi

	setv name "CamWidth::last" wndw

* Kill existing wrap cameras and grabbers

	enum 1 5 50200
		kill targ
	next

	enum 1 6 50200
		kill targ
	next

*Calculate panels wide

	setv va00 wndw

	setv va11 va00

	divv va11 game "C2toDS_CamWidth"

	addv va11 game "C2toDS_WrapPadding"

	setv va12 va00

	modv va12 game "C2toDS_CamWidth"

	doif va12 gt 0

		addv va11 1

	endi


*Begin counter for injecting Cameras*

	setv va03 0

*Set first Y

	setv va04 game "C2toDS_Top"

	subv va04 299

*Set first X Left

	setv va22 game "C2toDS_WrapLeft"

	addv va22 game "C2toDS_CamWidth"

	subv va22 va00

*Set first X Right

	setv va23 game "C2toDS_WrapRight"

	setv va15 100

	loop

		addv va04 299

		addv va03 1

*Offset the wrap onto the non-wrapped part of the world

		setv va10 game "C2toDS_WrapPadding"

		negv va10

		reps va11


*left side to show right side

*Calculate left side camera x-position

			setv va12 va10

			mulv va12 game "C2toDS_CamWidth"

			addv va12 va22

			setv va14 game "C2toDS_CamWidth"

			doif va12 lt 0

				addv va14 va12

*Ensure that camera has width and can be placed at zero

				doif va14 gt 20

					setv va12 0

				endi

			endi

*Calculate left side camera view x-position

			setv va13 va12

			addv va13 game "C2toDS_WrapOffset"


*Make sure left side camera is in bounds

			doif va12 >= 0

*create world wrap camera
*(plane 0 so they draw behind literally everything except the room background)
				new: comp 1 5 50200 "moe_C2toDS_camera" 1 1 0

				pat: cmra 1 "moe_C2toDS_camera" 1 0 0 0 va14 game "C2toDS_CamHeight" va14 game "C2toDS_CamHeight"

*reaaally make sure norns cant see it
				attr 16

				accg 0

				fric 100

				aero 0

				mvto va12 va04

				scam targ 1

				cmra va13 va04 0

				setv ov00 va13

				setv ov04 va04

				tick 100

			endi

*			wait 1
*			inst

*Left Side Grabber

			new: simp 1 6 50200 "moe_C2toDS_Camera" 1 1 1
*			new: simp 1 6 50200 "moe_C2toDS_Camera" 2 0 99
*			pose 1
*			dcor 1

*reaaally make sure norns cant see it
			attr 16

			accg 0

*			tick 16
*			tick 1
*			tick 10

*there should always be at least 1 grabber ticking at a time, but they should all be offset from each other by 1 tick.
			doif va16 < game "C2toDS_WrapTickRate"
				addv va16 1
			else
				setv va16 0
			endi

			tick va16



*
*			setv name "WhenDoesThisPieceTick?" va16

			fric 100

			aero 0

*			rnge 1000

			mvto va12 va04
*
**I Am on the right of the world, in the 10000 range*
*
*			setv name "WhichWrapPieceAmI?" left



*right side to show left side

*Calculate right side camera agent x

			setv va12 va10

			mulv va12 game "C2toDS_CamWidth"

			addv va12 va23

*Calculate camera position focus x

			setv va13 va12

			subv va13 game "C2toDS_WrapOffset"

*Make sure camera is still in bounds

			setv va14 va12

			addv va14 game "C2toDS_CamWidth"

			doif va14 gt game "C2toDS_Right"

				setv va15 va14

				subv va15 game "C2toDS_Right"

			else

				setv va15 game "C2toDS_CamWidth"

			endi

			setv va14 va12

			addv va14 va15


			doif va15 gt 20 and va14 le game "C2toDS_Right"

				new: comp 1 5 50200 "moe_C2toDS_camera" 1 1 1

				pat: cmra 1 "moe_C2toDS_camera" 1 0 0 0 va15 game "C2toDS_CamHeight" va15 game "C2toDS_CamHeight"

				attr 0

				accg 0

				fric 100

				aero 0

				mvto va12 va04

				scam targ 1

				cmra va13 va04 0

				setv ov00 va13

				setv ov04 va04

				tick 100

			endi

*----------*

*			wait 1
*			inst

*Right Side Grabber

			new: simp 1 6 50200 "moe_C2toDS_Camera" 1 1 1

*			dcor 1

			attr 0

			accg 0


*there should always be at least 1 grabber ticking at a time, but they should all be offset from each other by 1 tick.
			doif va16 < game "C2toDS_WrapTickRate"
				addv va16 1
			else
				setv va16 0
			endi

			tick va16

			fric 100

			aero 0

*			rnge 1000

			mvto va12 va04


*Increment X-wide

			addv va10 1

		repe

	untl va03 eq 8

**debug: no cameras
*	enum 1 5 50200
*		kill targ
*	next

*
**debug: visible wrap point (for some reason only whichever line was defined last actually draws)
*	setv game "C2toDS_Bottom" 49999
*	line 0 0 0 0 0 0 0 0 0
*
**	line game "C2toDS_WrapLeft" game "C2toDS_Top" game "C2toDS_WrapLeft" game "C2toDS_Bottom" 255 255 255 0 0
*	line 1 2 3 4 255 255 255 0 0
*	line game "C2toDS_WrapRight" game "C2toDS_Top" game "C2toDS_WrapRight" game "C2toDS_Bottom" 255 255 255 0 0


	unlk

endm



*----END INJECT CAMERAS AND WRAP PIECES----*



*This might be the cause of a mild performance hit, but it keeps the cameras from blacking out.*

*World Wrap Camera - Timer Script

scrp 1 5 50200 9

	tick 1000

	scam targ 1

	cmra ov00 ov04 0

endm



* World Wrap Camera - World Loaded script

*This might be the cause of a mild performance hit, but it keeps the cameras from blacking out.*

scrp 1 5 50200 128

	scam targ 1

	cmra ov00 ov04 0

endm







* World Wrap Grabber - Timer script (runs once every tick, but only a certain % of them will be ticking at once)

scrp 1 6 50200 9

*	stop

	lock

*debug: visualize ticking
*	dcor 1
*	wait 1


	tick game "C2toDS_WrapTickRate"

	inst

*loop over all touching agents. this is more efficient than an enum from a single Grabber.

	etch 0 0 0

*huge block of conditions because caos wants to check everything in a doif statement at the same time instead of stopping flow when the least likely thing happens
*todo: could probably clean this up with GSUB/SUBR

*just in case
		doif targ <> null
*no need to do anything if they're a "system" object
			doif fmly > 1
*make sure they aren't Floatable 
				setv va83 attr
				andv va83 32
				doif va83 <> 32

					doif posx gt game "C2toDS_WrapRight"

*make sure they're Autonomous
						doif movs eq 0

*make sure they're not holding the cursors hand!
*norn and hand cant interact with anything but each other so it doesn't matter that neither of them can interact with anything in this state.
							doif targ <> hhld

*set to SUBTRACT the wrap offset later
								setv va50 game "C2toDS_WrapOffset"
								negv va50

*pixel offset used when tracked objects (usually norns) go through the wrap. set to 1 pixel to temporarily break tracking.
								setv va70 1

								gsub Move_Object_Over_Wrap

							endi
						endi

					elif posx lt game "C2toDS_WrapLeft"

*make sure they're Autonomous
						doif movs eq 0

*make sure they're not holding the cursors hand!
*norn and hand cant interact with anything but each other so it doesn't matter that neither of them can interact with anything in this state.
							doif targ <> hhld

*set to ADD the wrap offset later
								setv va50 game "C2toDS_WrapOffset"

*pixel offset used when tracked objects (usually norns) go through the wrap. set to 1 pixel to temporarily break tracking.
								setv va70 -1

								gsub Move_Object_Over_Wrap

							endi
						endi

****OBJECT WASN'T ON EITHER SIDE OF THE WRAP (BUT WAS STILL TOUCHING A GRABBER), SO MAKE A MIRROR THAT NORNS CAN SEE!****

					else

						gsub Make_Mirror_Object

					endi
				endi
			endi
		endi
	next




*debug: visualize ticking
*	targ ownr
*	dcor 0








**********if the target is over either side of the wrap**********
	subr Move_Object_Over_Wrap

***IF A CREATURE WENT OVER THE WRAP, REMOVE ANY MIRROR COPIES OF IT SO IT DOESN'T SEE ITSELF BRIEFLY AS IT CROSSES THE WRAP PONT!****

		doif crea targ = 1
			seta va34 targ
			enum 1 7 50203
				doif ov00 = va34
					kill targ
				endi
			next
			targ va34
		endi

**************************************************************************************************************************************		



*make a mirror object as soon as an object goes over the wrap so norns attention never flickers

*set this variable to 1 so the subroutine knows to handle it differently
		setv va89 1
		gsub Make_Mirror_Object





*********************HANDLE TRACKED OBJECTS*********************

*Notes:

*hand unhold trck numbers
*trck norn 70 70 1 0

*hand hold trck numbers
*trck targ 70 70 2 0

		setv va02 0
		setv va03 0

*check if the object is being tracked by the camera
		doif targ = trck

*remember current camera coordinates before we jump
			setv va02 wndl
			setv va03 wndt

*we are breaking tracking by offsetting the camera by 1 pixel.
*tracking will resume if the pointer manually moves over the wrap. this seems preferable to disabling tracking entirely.
			addv va02 va70

		endi


****************************************************************




*if the target is an object
		doif crea targ ne 1

**debug: what just went through the wrap?
*			dbg: outv fmly
*			dbg: outv gnus
*			dbg: outv spcs

			setv va00 posl
			setv va01 post

*			addv va01 1
			addv va00 va50


*sometimes this script fires twice in quick succession and tries to move things out of bounds, this should fix that
			doif game "C2toDS_RoomID" = gmap va00 va01

*move the object to the other side of the wrap

*do an unsafe move if possible
				doif tmvt va00 va01 = 1
					mvto va00 va01
				else
					mvsf va00 va01
				endi

*				dcor 1
			endi

*if the target is a creature
		else

			setv va00 dftx
			setv va01 dfty

			addv va00 va50

*this helps out norns that might otherwise get stuck trying to cross through the wrap by moving them forward and up by 1 pixel
			subv va01 1
			subv va00 va70

*sometimes this script fires twice in quick succession and tries to move things out of bounds, this should fix that
			doif game "C2toDS_RoomID" = gmap va00 va01

*move the creature to the other side of the wrap
*(do an unsafe move if possible)
				doif tmvf va00 va01 = 1
					mvft va00 va01
				else
					mvsf va00 va01
				endi

			endi

		endi

*if we have stored some camera coordinates to jump to (and they're not out of bounds)
		doif va02 > 0 and game "C2toDS_RoomID" = gmap va02 va03

*move camera to equivalent coordinate on other side of world
*(the automatic camera reposition is offset as if you dragged the creature to the far edge of the window)
			cmra va02 va03 0

		endi

	retn












	subr Make_Mirror_Object

**debug: highlight object that you just cloned
*		dcor 1

		inst



**** ONLY CONTINUE IF THERE ARE NORNS NEAR THE WRAP **** 
****************************************************************************************************************
*(this results in a roughly 15-20 fps increase when norns aren't near the wrap)

		doif game "C2toDS_NornsNearWrap?" = 1

****************************************************************************************************************


*make sure the object is NOT invisible to creatures 
			setv va83 attr
			andv va83 16

			doif va83 <> 16

*MAKE MIRROR OBJECT

*remember XY coords of original object
				setv va11 post
				setv va12 posx

*if this was called by an object going over the wrap, adjust the x coord so the rest of the script can treat it as a mirrored object
				doif va89 = 1

					doif va12 >= game "C2toDS_WrapRight"
						subv va12 game "C2toDS_WrapOffset"
					elif va12 <= game "C2toDS_WrapLeft"
						addv va12 game "C2toDS_WrapOffset"
					endi

				endi


*check which side of the wrap the object is on and add or remove the appropriate offset:


*only do this for objects that are within 500 units of the wrap point (on either side)
				setv va60 game "C2toDS_WrapRight"
				setv va62 va60
				subv va60 500

				setv va61 game "C2toDS_WrapLeft"
				setv va63 va61
				addv va61 500

				doif va12 <= va62 and va12 > va60

					setv va73 game "C2toDS_WrapOffset"
					negv va73

					gsub Make_Mirror_Object_2

				elif va12 >= va63 and va12 < va61

					setv va73 game "C2toDS_WrapOffset"

					gsub Make_Mirror_Object_2

				endi

			endi

		endi

	retn



*this subr is in 2 parts because it's easier
	subr Make_Mirror_Object_2

*		doif targ = pntr
*			dbg: outs "cloned pointer"
*		endi

		seta va19 targ

*fake temp object needs to have the same category as the real one
		setv va17 cata
*and also the same visibility setting according to attr
		setv va18 attr

*and also let creatures do whatever they could do to the original - scripts will redirect to the original ones
		setv va20 bhvr


*do some quick maths to work out how high the copy should be (width doesnt matter, the closer they walk toward the real one the better)
*(it's a spritesheet with different frames representing how high the object is because CORE doesn't change where norns can interact with it)

		setv va21 hght

*(if it's extremely small you can use the 1x1)
		doif va21 > 16
			divv va21 32
			setv va21 ftoi va21

*we don't want frame 0...
			doif va21 = 0
				setv va21 1
			endi
*unless we're smaller than 16 pixels
		else
			setv va21 0
		endi

*store if it's a creature or not
		setv va22 crea targ


*create a temporary Mirror Object to copy the Category and pos of our real object
*it is a 1 x va21 (above) sprite is positioned using the middle X coordinate of the real object
		new: simp 1 7 50203 "moe_c2tods_collisiontester" 0 va21 0

*fake temp object needs to have the same category as the real one
		cato va17

		attr 0

*if it's a Creature, give it no bhvr. problems arise if creatures try to interact with something pretending to be a creature. 
		doif va22 = 1
			bhvr 0

*otherwise norns can see it and do any interactions they could do on the original object (will be redirected TO the original object)
		else
			bhvr va20
		endi

*		dbg: outv bhvr


*store link to original object in ov00
		seta ov00 va19

*store offset in ov01 (so we can reapply it during the timer script)
		setv ov01 va73



*apply offset and move into position
		addv va12 va73

		mvto va12 va11



**debug: put all cloned objects in a specific spot so norns can test interacting with them		
*		mvto 2121 48512

**debug: put all cloned CREATURES in a specific spot so norns can test interacting with them
*		doif va22 = 1
*			mvto 2121 48512
*		endi



**debug: highlight objects that are clones
*		dcor 1




*if you were called from an object going over the wrap instead of one you found already over the wrap, tick faster. a norn is probably looking at you.
		doif va89 = 1

			tick 1

*target original object so move object over wrap script can continue
			targ va19

		else

*otherwise delete yourself as often as the wrappers tick (+1) so there are no ticks where a mirror object isn't present
			setv va95 game "C2toDS_WrapTickRate"
			addv va95 1
			tick va95

		endi

*		tick 1000




	retn



endm




*Pointer Tracker - Timer Script, runs once per tick*

scrp 5 7 50200 9



*stop

	inst

*remember the pointer coords
	setv va00 mopx
	setv va01 mopy

	doif game "C2toDS_RoomID" = gmap va00 va01

***************************************************************************************************************************************
*if it's too far off the LEFT side, we need to wrap the camera round to the right
***************************************************************************************************************************************
		doif va00 < game "C2toDS_WrapLeft"


*don't automatically move the camera if we're holding a creatures hand, let the World Wrap Grabber timer script handle it
			doif crea hhld ne 1

				scam null 0

				setv va04 wndl

				addv va04 game "C2toDS_WrapOffset"

				setv va05 wndt


*FIX FOR CAMERA JUMPING ON VERY HIGH SCREEN RESOLUTIONS (WIDER THAN THE WIDTH OF THE EXTRA WORLD PARTS OFF THE SIDE OF THE MAP! (2048))
***************************************************************************************************************************************
*(as far as I can tell, this problem only needs to be corrected for pointer going off the LEFT side of the map)

*get window width
				setv va06 wndw
*				dbg: outv va06

*init va09 as 0 so it will be false by default (aka move the camera as normal)
				setv va09 0


*don't bother with any of these checks if window width is < 2047!
				doif va06 >= game "C2toDS_WrapLeft"

*todo: maybe implement this code in the click section somewhere
**add a 33% area of forgiveness so it doesnt feel like you cant touch your norns so often
*					setv va16 va06
*					divv va16 3
*					addv va06 va16

*2047 is max window size. subtract it from va06 to find out how much wider our window is than the max.
*(WrapLeft happens to be equivalent to how many extra pixels of world exist on either side of the wrap.)
*this = 512 if window is 2560 wide. or possibly 511.
					subv va06 game "C2toDS_WrapLeft"

*				dbg: outv va06

*get window left X coord
					setv va07 wndl

*get left wrap X coord
					setv va08 game "C2toDS_WrapLeft"


*subtract left wrap X coord from window left X coord to see how close to the edge of the screen the camera is
					subv va08 va07
*					dbg: outv va08

*if camera is too close to edge of screen when moving mouse, don't move camera
					doif va08 < va06

*set a reminder not to move the camera
						setv va09 1

					endi

				endi

***************************************************************************************************************************************

*move the camera if the coords are in bounds
				doif gmap va04 va05 <> -1 and va09 = 0

					cmra va04 va05 0

				endi

			endi

***************************************************************************************************************************************
*if it's too far off the RIGHT side, we need to wrap the camera round to the left
***************************************************************************************************************************************

		elif va00 > game "C2toDS_WrapRight"


*don't automatically move the camera if we're holding a creatures hand, let the World Wrap Grabber timer script handle it
			doif crea hhld ne 1

				scam null 0

				setv va04 wndl

				subv va04 game "C2toDS_WrapOffset"

				setv va05 wndt

				doif gmap va04 va05 <> -1

					cmra va04 va05 0

				endi

			endi

		endi

***************************************************************************************************************************************

	endi



	inst

*CLONE NORN INDICATOR FRAME AND POSITION (but moved across offset)
	rtar 1 2 1

*if selected norn is holding the creatures hand, hide the duplicate indicator
*(this was occasionally causing double indicators)

*also don't do anything if we're not in the C2toDS room
	doif norn <> hhld and game "C2toDS_RoomID" = gmap posl post

*check what side of the world the indicator is on
		setv va60 game "C2toDS_WrapRight"
		subv va60 6223

		setv va61 game "C2toDS_WrapLeft"
		addv va61 6223

		doif va00 <= game "C2toDS_WrapRight" and va00 > va60

*set to SUBTRACT the wrap offset later
			setv va50 game "C2toDS_WrapOffset"
			negv va50

		elif va00 >= game "C2toDS_WrapLeft" and va00 < va61

*set to ADD the wrap offset later
			setv va50 game "C2toDS_WrapOffset"

		endi

		setv va10 posl
		setv va11 post
		subv va10 va50
		setv va12 pose

		targ mv01
		pose va12
		mvto va10 va11

	else

		targ mv01
		mvto -100 -100

	endi


*CLONE ATTENTION INDICATOR FRAME AND POSITION (but moved across offset)
	rtar 1 2 2

*if selected norn is holding the creatures hand, hide the duplicate indicator
*(this was occasionally causing double indicators)

*also don't do anything if we're not in the C2toDS room
	doif norn <> hhld and game "C2toDS_RoomID" = gmap posl post


*check what side of the world the indicator is on
		setv va60 game "C2toDS_WrapRight"
		subv va60 6223

		setv va61 game "C2toDS_WrapLeft"
		addv va61 6223

		doif va00 <= game "C2toDS_WrapRight" and va00 > va60

*set to SUBTRACT the wrap offset later
			setv va50 game "C2toDS_WrapOffset"
			negv va50

		elif va00 >= game "C2toDS_WrapLeft" and va00 < va61

*set to ADD the wrap offset later
			setv va50 game "C2toDS_WrapOffset"

		endi

		setv va10 posl
		setv va11 post
		subv va10 va50
		setv va12 pose

		targ mv02
		pose va12
		mvto va10 va11

	else

		targ mv02
		mvto -100 -100

	endi

endm





*Pointer Tracker - Raw Mouse Down script
*This copies the effect of agent help bubbles over the world wrap.

scrp 5 7 50200 76

	inst

*only run this script if there are creatures near the wrap to hear you
	doif game "C2toDS_NornsNearWrap?" = 1


* left mouse - shout your name
		doif _p1_ = 1

*check if "agent help watcher" IMSK is set to 9. If it is, that means agent help mode is active.
			rtar 1 2 4
			doif imsk <> 9
				stop
			endi

			seta va05 hots
			doif va05 <> null


				targ va05


*store XY coords for later
				setv va00 posl
				setv va01 post

*fake temp object needs to have the same category as the real one
				setv va50 cata
*and also the same visibility setting according to attr
				setv va51 attr


*stop the script if we're not in the C2toDS metaroom
				doif game "C2toDS_RoomID" <> gmap va00 va01
					stop
				endi

*		set up string with name of object
				setv va98 cata
				sets va99 catx va98

* icons gui
				doif fmly eq 1 and gnus eq 2 and spcs eq 14
					stop
* agent help box
				elif fmly eq 1 and gnus eq 2 and spcs eq 5
					stop
				else
* unclassified (39) things don't say their name
					doif va98 <> -1

						targ va05

*create a temporary Mirror Object to shout the Category of our real object
						new: simp 1 7 50202 "blnk" 1 0 0

*fake temp object needs to have the same category as the real one
						cato va50

						attr 0

*check which side of the wrap the object is on and add or remove the appropriate offset:


*only do this for objects that are within 500 units of the wrap point (on either side)
						setv va60 game "C2toDS_WrapRight"
						subv va60 500

						setv va61 game "C2toDS_WrapLeft"
						addv va61 500

						doif va00 <= game "C2toDS_WrapRight" and va00 > va60

							subv va00 game "C2toDS_WrapOffset"

						elif va00 >= game "C2toDS_WrapLeft" and va00 < va61

							addv va00 game "C2toDS_WrapOffset"

						else
							kill targ
							stop
						endi

						mvto va00 va01

*						seta va06 targ
*
** send message to bubble factory to do visuals
*						rtar 1 2 10
*						mesg wrt+ targ 126 va99 va06 0
*** target agent again, and send shout from it
**					targ va06

						ordr shou va99

						kill targ

					endi
				endi
			endi

		endi

	endi

endm





*A keypress
scrp 5 7 50200 73

	lock

*only run this script if there are creatures near the wrap to hear you
	doif game "C2toDS_NornsNearWrap?" = 1

*if the user pressed enter (or control S)
		doif _p1_ eq 'S' or _p1_ eq 13

*WHY IS THIS NEEDED. IT MAKES NO SENSE.
*(I believe it's waiting until the start of the next tick because the Key Down event takes place before the speech bubble exists)
*todo: this can probably be wait 1
			wait 0
			targ ownr
			inst

			sets va02 ""

*grab the pointer so we can check where it is
			targ pntr

*remember the pointer coords
			setv va00 posl
			setv va01 post

			doif game "C2toDS_RoomID" = gmap va00 va01

				setv va10 va00
				setv va11 va01
				setv va12 va00

				addv va10 10
				addv va11 10
				subv va12 10


*scan speech bubbles
				enum 1 2 9

*				dbg: outs "va00:"
*				dbg: outs vtos va00
*				dbg: outs "va10:"
*				dbg: outs vtos va10
*				dbg: outs "posr:"
*				dbg: outs vtos posr

*				dbg: outs "va00:"
*				dbg: outs vtos va00
*				dbg: outs "va12:"
*				dbg: outs vtos va12
*				dbg: outs "posl:"
*				dbg: outs vtos posl

*check if the speech bubble is within 10px of the pointer top left coord.
					setv va99 0

*first check Y pos
					doif posb > va01 and posb < va11

*then check X pos, taking into account that the speech bubble can appear on either side of the pointer
						doif posr >= va00 and posr < va10
							setv va99 1
						elif posl <= va00 and posl > va12
							setv va99 1
						endi

					endi

*if the above checks were true, carry on with the script
					doif va99 = 1

*set the ptxt in va02 for now
						part 1
						doif targ ne null
							sets va02 ptxt

*make sure the hand said something and didn't just press enter by mistake

							doif va02 <> ""

								inst

*va20 will be the offset copy of the X coordinate, separate from va00 so we can go back afterwards.
								setv va20 va00


*check which side of the wrap the pointer is on and add or remove the appropriate offset:


*only do this if the pointer is within 500 units of the wrap point (on either side)
								setv va60 game "C2toDS_WrapRight"
								subv va60 500

								setv va61 game "C2toDS_WrapLeft"
								addv va61 500

								doif va00 <= game "C2toDS_WrapRight" and va00 > va60

									subv va20 game "C2toDS_WrapOffset"

								elif va00 >= game "C2toDS_WrapLeft" and va00 < va61

									addv va20 game "C2toDS_WrapOffset"

								else
									stop
								endi



*target the pointer and move it across the wrap
								targ pntr

								mvto va20 va01

*repeat the last thing the pntr said so that creatures can hear it through the wrap
								ordr shou va02

*test string to show that indeed, creatures can hear it
*							ordr shou "perfect noun 2 hand"

**debug: put the sentence you repeated in the debug output stream
*							dbg: outs va02

*move it back where it came from
								mvto va00 va01

							endi

						endi

					endi

				next

			endi

		endi

	endi

endm





*126 Make Speech Bubble
*Called when a creature speaks, so scripts can display a speech bubble. Every agent which has this script is called. _P1_ is the text being spoken, _P2_ is the creature who is speaking.
scrp 5 7 50200 126

	inst

*if the target somehow became null, don't do anything
	doif crea _p2_ = 0
		stop
	endi

*only run this script if there are creatures near the wrap to hear you
	doif game "C2toDS_NornsNearWrap?" = 1


*wait half a tick so the regular speech bubble script can fire off
		wait 0
*target the creature that just spoke
		targ _p2_
		inst

*creature must not be in a vehicle or etc
		doif movs <> 0
			stop
		endi

*remember the creature coords
		setv va00 dftx
		setv va01 dfty


		doif game "C2toDS_RoomID" = gmap va00 va01


*remember what they're looking at so we can put their attention back on it after the warp
*(doesn't seem to be needed)
*		seta va03 iitt


*va20 will be the offset copy of the X coordinate, separate from va00 so we can go back afterwards.
			setv va20 va00

*check which side of the wrap the creature is on and add or remove the appropriate offset:


*only do this for creatures that are within 500 units of the wrap point (on either side)
			setv va60 game "C2toDS_WrapRight"
			subv va60 500

			setv va61 game "C2toDS_WrapLeft"
			addv va61 500

			doif va00 <= game "C2toDS_WrapRight" and va00 > va60

				subv va20 game "C2toDS_WrapOffset"

			elif va00 >= game "C2toDS_WrapLeft" and va00 < va61

				addv va20 game "C2toDS_WrapOffset"

			else
				stop
			endi



*sometimes this script fires twice in quick succession and tries to move norns out of bounds, this should fix that
			doif game "C2toDS_RoomID" <> gmap va20 va01
				stop
			endi


*move the creature to the other side of the wrap
*(do an unsafe move if possible)
			doif tmvf va20 va01 = 1
				mvft va20 va01
			else
				mvsf va20 va01
			endi

*repeat the last thing the creature said so that other creatures can hear it through the wrap
			ordr shou _p1_

*move it back where it came from
*(do an unsafe move if possible)
			doif tmvf va00 va01 = 1
				mvft va00 va01
			else
				mvsf va00 va01
			endi

*genus
			setv va80 gnus
*gender
			setv va81 spcs
*age
			setv va82 cage


*create a temporary Shout Object to emit audio the player can hear of what the creature just said!
			new: simp 1 7 50202 "blnk" 1 0 0


			attr 16

			voic va80 va81 va82

			mvto va20 va01

			tick 50

			sezz _p1_


*norns forget what they were looking at before the teleport, so urge them to look at it again when they come back.
*commented out because in further testing, norns were not forgetting what they were looking at.
*		doif va03 ne null
*			targ va03
*			urge writ _p2_ 0 0.5 -1 -1.0
*		endi


		endi

	endi

endm






*switch room event
*This script is not natively executed by the engine, but is triggered by a script in DS Favorite Places.cos. Called when the main camera is switched to a different metaroom.

scrp 5 7 50200 900

	inst

*enable or disable the pointer tracker ticking whenever we enter or exit the C2toDS room	

*WE ARE IN THE C2TODS METAROOM
	doif game "C2toDS_RoomID" = gmap mopx mopy

		tick 1

	else

		tick 0

	endi

endm



















*every N ticks, check if creatures are near the wrap

scrp 1 7 50204 9

	inst

	setv va75 0

	enum 4 0 0

*don't bother if they're dead or asleep, they won't be able to see the objects anyway!
		doif dead = 0 and aslp = 0
			setv va12 posx

*only do this for objects that are within 500 units of the wrap point (on either side)
			setv va60 game "C2toDS_WrapRight"
			subv va60 500

			setv va61 game "C2toDS_WrapLeft"
			addv va61 500

			doif va12 <= game "C2toDS_WrapRight" and va12 > va60

				setv va75 1

			elif va12 >= game "C2toDS_WrapLeft" and va12 < va61

				setv va75 1

			endi
		endi

	next

	setv game "C2toDS_NornsNearWrap?" va75

*	dbg: outv va75


endm






*delete mirror objects after N ticks

scrp 1 7 50203 9

*	kill ownr

	inst

	setv va00 0

*don't delete if a creature is paying attention to it.
*(this fixes the attention indicator flickering)

	esee 4 0 0

		doif ownr = iitt
			setv va00 1
*			dbg: outs "a norn is looking at a mirror object so im not deleting it"

*if it's pretending to be a creature, move the object out of reach so the norn continues walking towards it
			doif crea mv00 = 1

				setv va90 relx targ ownr
				absv va90

				doif va90 < 100
*				doif touc ownr targ = 1
*					dbg: outv relx ownr targ


*move in the same direction as your offset
					targ ownr
					doif ov01 > 0
						mvby 1 0
					else
						mvby -1 0
					endi

*special case where we set tickrate to 1 without overriding movement
					setv va00 2

				endi
			endi

		endi

	next

* if OV00 (real world counterpart) is null, delete it anyway
	doif va00 = 0 or mv00 = null
		kill ownr
*if we're not deleting it, update its position
	elif va00 = 1
		targ mv00
		setv va01 posx
		setv va02 post

*add appropriate offset!
		addv va01 mv01

		targ ownr
		mvto va01 va02
*and set it to update its position/check for deletion way more frequently
		tick 1
*		dbg: outs "changed tickrate"

*if we're not deleting it and it's a creature that a norn nearly interacted with
	elif va00 = 2

*tick as often as the wrappers tick
*		tick game "C2toDS_WrapTickRate"
		tick 1


	endi

endm




********************************************************************************************************

***MIRROR OBJECT ACTION REDIRECTS**

********************************************************************************************************


*Activate 1 (0)
scrp 1 7 50203 1

	inst
	doif ov00 <> null
		mesg wrt+ from 50200 ov00 0 0
	else
		kill ownr
	endi

endm


*Activate 2 (1)
scrp 1 7 50203 2

	inst
	doif ov00 <> null
		mesg wrt+ from 50200 ov00 1 0
	else
		kill ownr
	endi

endm


*Deactivate (2)
scrp 1 7 50203 0

	inst
	doif ov00 <> null
		mesg wrt+ from 50200 ov00 2 0
	else
		kill ownr
	endi

endm


*Hit (3)
scrp 1 7 50203 3

	inst
	doif ov00 <> null
		mesg wrt+ from 50200 ov00 3 0
	else
		kill ownr
	endi

endm


*Pickup (4)
scrp 1 7 50203 4

	inst
	doif ov00 <> null

*force creature to drop the object they just picked up (the mirror copy)
		targ from
		drop
		wait 1

*force creature to pick up the real object
		inst
		doif mv00 <> null
			mesg wrt+ from 50200 mv00 4 0
		endi

	endi

	wait 1
	kill ownr

endm


*Eat (12)
scrp 1 7 50203 12

	inst
	doif ov00 <> null
		mesg wrt+ from 50200 ov00 12 0
	else
		kill ownr
	endi

endm


*creature interacts with mirror object, which is redirected to the appropriate action on the real object 

*_P1_ is object to target
*_P2_ is script number to run

scrp 4 0 0 50200

*	dbg: outs "running script num: "
*	dbg: outv _p2_

	inst
	doif _p1_ <> null
		mesg writ _p1_ _p2_
	endi

endm


********************************************************************************************************






*WORLD WRAP MIRROR TIMER SCRIPT
*(used to delete a mirror speech object after its done talking!)

scrp 1 7 50202 9

	kill ownr

endm













*This script is designed to be called by other objects that say messages out loud for norns to hear, it repeats the message offset over the wrap
*_P1_ is agent to take coords from
*_P2_ is text to repeat over the wrap

scrp 1 7 50205 1000

	inst

*only run this script if there are creatures near the wrap to hear you
	doif game "C2toDS_NornsNearWrap?" = 1

		doif _p1_ <> null

			targ _p1_


*store XY coords for later
			setv va00 posl
			setv va01 post


*stop the script if we're not in the C2toDS metaroom
			doif game "C2toDS_RoomID" <> gmap va00 va01
				stop
			endi

*create a temporary Mirror Object to shout the text
			new: simp 1 7 50202 "blnk" 1 0 0

			attr 0

*check which side of the wrap the object is on and add or remove the appropriate offset:


*only do this for objects that are within 500 units of the wrap point (on either side)
			setv va60 game "C2toDS_WrapRight"
			subv va60 500

			setv va61 game "C2toDS_WrapLeft"
			addv va61 500

			doif va00 <= game "C2toDS_WrapRight" and va00 > va60

				subv va00 game "C2toDS_WrapOffset"

			elif va00 >= game "C2toDS_WrapLeft" and va00 < va61

				addv va00 game "C2toDS_WrapOffset"

			else
				kill targ
				stop
			endi

			mvto va00 va01

** send message to bubble factory to do visuals
*						rtar 1 2 10
*						mesg wrt+ targ 126 va99 va06 0
*** target agent again, and send shout from it
**					targ va06

			ordr shou _p2_

			kill targ

		endi
	endi

endm











rscr


*Delete Cameras*

enum 1 5 50200

	kill targ

next

*Delete Grabbers*

enum 1 6 50200

	kill targ

next

*Delete Pointer Tracker*

enum 5 7 50200

	kill targ

next

*Delete Window Resize Camera Builder*

enum 1 7 50201

	kill targ

next

*Delete Speech Mirror Objects*

enum 1 7 50202

	kill targ

next

*Delete Mirror Objects*

enum 1 7 50203

	kill targ

next


*Delete are Norns Near Wrap? tracker

enum 1 7 50204

	kill targ

next

*Delete speech mirror object

enum 1 7 50205

	kill targ

next


scrx 1 7 50201 123
scrx 1 7 50201 9

scrx 1 5 50200 9
scrx 1 5 50200 128
scrx 1 6 50200 9
scrx 5 7 50200 9
scrx 5 7 50200 76
scrx 5 7 50200 73
scrx 5 7 50200 126
scrx 5 7 50200 900

scrx 1 7 50204 9

scrx 1 7 50203 9
scrx 1 7 50203 1
scrx 1 7 50203 2
scrx 1 7 50203 0
scrx 1 7 50203 3
scrx 1 7 50203 4
scrx 1 7 50203 12

scrx 4 0 0 50200

scrx 1 7 50202 9

scrx 1 7 50205 1000


**debug: turn off object highlighting
*enum 0 0 0
*	dcor 0
*next



*Remove "wrap" room links*

doif grap 2070 4764 ne -1 and link grap 2070 47640 grap 10375 47640 ne 0

*Atmosphere

	link grap 2070 47640 grap 10375 47640 0

*Desert Beach

	link grap 2070 48090 grap 10375 48090 0

*Biome 1

	link grap 2070 48340 grap 10375 48340 0

*Biome 2

	link grap 2070 48822 grap 10375 48822 0

*Machines to Volcano

	link grap 2070 49340 grap 10375 49340 0

endi
