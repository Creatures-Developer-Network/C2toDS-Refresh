* 3 1 50202 - Submarine

new: vhcl 3 1 50202 "moe_C2toDS_sub" 1 1 5000

cabw 10

cabp -10

cabn 50 30 170 130
** As part of the sub upgrade, making the room type be whatever's in the lab - Verm
cabv grap 6325 49072

attr 20

setv ov00 0

pat: dull 1 "moe_C2toDS_sub" 0 65 22 -11

* left button

pat: butt 2 "moe_C2toDS_sub" 2 2 4 75 2 [1 0] 1001 0

* right button

pat: butt 3 "moe_C2toDS_sub" 4 2 184 75 2 [1 0] 1002 0

pat: dull 4 "moe_C2toDS_sub" 6 191 52 1

pat: dull 5 "moe_C2toDS_sub" 10 1 52 1

pat: dull 6 "moe_C2toDS_sub" 14 -95 40 2

pat: dull 8 "moe_C2toDS_sub" 23 200 40 2

mvto 9186 48430

cato 35
**Also to note, only the pointer can make the sub go down - Verm
new: simp 3 12 50202 "moe_C2toDS_lifts" 2 7 2000

attr 4

bhvr 3
* Left-Right Butt
setv ov00 0

cato 2

mvto 8300 48400

new: simp 3 12 50202 "moe_C2toDS_lifts" 2 7 2000

attr 4

bhvr 3

* Right-Left Butt
setv ov00 1

cato 2

mvto 9363 48415

scrp 3 12 50202 1
	inst
	* light up, light up
	rtar 3 1 50202
	doif ov00 eq mv00
		targ ownr
		pose 1
	endi
*Queue Object!
	targ from
	doif crea targ eq 1
		sets va48 gtos 0
		* check for any existing queue object
		enum 3 13 50202
			doif ov01 eq va48
				addv va49 1
			endi
		next
		* make a queue object if there's not one already
		doif va49 eq 0
			new: simp 3 13 50202 "blnk" 1 0 0
			*dbg: outs "making quere"
			setv ov00 mv00
			sets ov01 va48
			tick 20
		endi

		stim writ from 75 1
		stim writ from 96 1
		urge writ from 0 0.5 0 0.5
	endi
	rtar 3 1 50202
*It's on the right!
	doif ov00 eq 0
		mesg writ targ 1001
*It's on the left!
	elif ov00 eq 1
**So go right!
		mesg writ targ 1002
*It's on the Bottom!
	elif ov00 eq 2
		mesg writ targ 1002
	endi
endm

scrp 3 12 50202 2
	inst
	* light up, light up
	rtar 3 1 50202
	doif ov00 eq mv00
		targ ownr
		pose 1
	endi
*Queue Object!
	targ from
	doif crea targ eq 1
		sets va48 gtos 0
		* check for any existing queue object
		enum 3 13 50202
			doif ov01 eq va48
				addv va49 1
			endi
		next
		* make a queue object if there's not one already
		doif va49 eq 0
			new: simp 3 13 50202 "blnk" 1 0 0
			*dbg: outs "making queue"
			setv ov00 mv00
			sets ov01 va48
			tick 20
		endi

		stim writ from 75 1
		stim writ from 96 1
		urge writ from 0 0.5 0 0.5
	endi
	rtar 3 1 50202
*It's on the right!
	doif ov00 eq 0
**So go left!
		mesg writ targ 1001
*It's on the left!
	elif ov00 eq 1
		mesg writ targ 1002
*It's on the Bottom!
	elif ov00 eq 2
		mesg writ targ 1001
	endi
endm

scrp 3 13 50202 9
	inst
* Just here to continue injecting wait
	doif ooww ov01 eq 3
		targ mtoc ov01
		doif targ ne null
			doif carr eq null
				stim writ from 75 1
			else
* Picked up, stop queueing
				stim writ targ 96 0
				driv 19 -1.0
				kill ownr
			endi
		else
			kill ownr
		endi
	else
		kill ownr
	endi
endm

**Telling it where to go
scrp 3 1 50202 1001

	lock

	doif ov00 eq 0

		gsub right_to_left

	elif ov00 eq 1

		gsub left_to_bottom

	elif ov00 eq 2

		gsub bottom_to_right

	endi
	inst
*There's still passengers!	
	doif totl 3 13 50202 gt 0
		setv va00 0
		doif ov00 eq 0
*Your on the right, go left
			setv va00 1
		elif ov00 eq 1
*Your on the left, go right
			setv va00 2
		elif ov00 eq 2
*Your on the bottom, see if the left or right has more passangers
			setv va12 0
			setv va13 0
			enum 3 13 50202
				doif ov00 eq 0
					addv va12 1
				else
					addv va13 1
				endi
			next
**If equal go random
			doif va12 eq va13
				setv va00 rand 1 2
**More passangers on the left
			elif va12 gt va13
				setv va00 2
**More passangers on the right
			elif va13 gt 12
				setv va00 1
			endi
		endi
	endi
	enum 3 12 50202
		pose 0
	next
	unlk
* Do 1001
	doif va00 eq 1
		mesg writ ownr 1001
* Do 1002
	elif va00 eq 2
		mesg writ ownr 1002
	endi
	stop



	subr right_to_left
		inst
* Get the queued creatures
		enum 3 13 50202
			doif ov00 eq 1
				doif ooww ov01 eq 3
					
					* spas takes some time to work, so loop
					* and keep checking if you got a creature
					* before continuing
					loop
						spas ownr mtoc ov01
						wait 1
						addv va46 1
						seta va45 targ
						targ ownr
						epas 4 0 0
							addv va44 1
						next
						targ va45
					untl va44 gt 0 or ooww ov01 ne 3 

					kill targ
				else
					kill targ
				endi
			endi
		next
		slow
		part 2

		frat 2

		anim [0 1 0 1 0 1 0]

		over

		targ ownr
		doif from eq pntr
			gpas 4 0 0 1
		endi
		part 5

		frat 3

		anim [0 1 2 3 2 1 255]

		part 4

		frat 3

		anim [0 1 2 3 2 1 255]

		setv vely 2.5

		snde "sub1"

		loop

			wait 1

			gsub breathe

			gsub breathe

		untl posb ge 48700

		setv vely 0

		part 5

		pose 0

		setv velx -5

		snde "sub2"

		loop

			wait 1

			gsub breathe

			gsub breathe

		untl posl le 8225

		snde "sub2"

		setv velx -2.5

		loop

			wait 1

			gsub breathe

		untl posl le 8125

		setv velx 0

		part 5

		frat 3

		anim [0 1 2 3 2 1 255]

		setv vely -2.5

		snde "sub3"

		loop

			wait 1

			gsub breathe

			gsub breathe

		untl posb le 48580

		setv vely 0

		fade

		part 5

		pose 0

		part 4

		pose 0

		targ ownr

		epas 4 0 0
			stim writ targ 96 0
			driv 19 -1.0
		next

		dpas 4 0 0

		setv ov00 1

		attr 28

		etch 4 0 0

			setv vely -10

		next

	retn



	subr breathe

		epas 4 0 0

			chem 29 1

			stim writ targ 75 1

			stim writ targ 96 0

		next

		targ ownr

	retn



	subr left_to_bottom

		part 2

		frat 2

		anim [0 1 0 1 0 1 0]

		over

		targ ownr

		doif from eq pntr
			gpas 4 0 0 1
		endi

		part 5

		anim [0 1 2 3 2 1 255]

		part 4

		anim [0 1 2 3 2 1 255]

		setv vely 5

		snde "sub1"

		rtar 2 2 50202

		doif name "open" eq 0

			mesg writ targ 0

		endi

		targ ownr

		snde "sub2"

		loop

			wait 1

			gsub breathe

			gsub breathe

* bottom slow down

		untl posb ge 48830

		setv vely 2.5

		snde "sub3"

		loop

			wait 1

			gsub breathe

			gsub breathe

* bottom stop

		untl posb ge 49030

		part 4

		pose 0

		setv vely 0

		setv velx 5

		snde "sub1"

		loop

			wait 1

			gsub breathe

			gsub breathe

		untl posr ge 8550

		setv velx 2.5

		part 4

		anim [0 1 2 3 2 1 255]

		loop

			wait 1

			gsub breathe

			gsub breathe

		untl posr ge 8720

		setv velx 0

		part 5

		pose 0

		setv ov00 2

		rtar 2 2 50203

		mesg writ targ 0

		wait 20

		targ ownr

		fade

		reps 5

			mvby 0 4

		repe

		part 4

		pose 0

		epas 4 0 0
			stim writ targ 96 0
			driv 19 -1.0
		next

		dpas 4 0 0

		attr 28

	retn



	subr bottom_to_right

		part 2

		frat 2

		anim [0 1 0 1 0 1 0]

		over

		targ ownr

		doif from eq pntr
			gpas 4 0 0 1
		endi

		rtar 2 2 50202

		doif name "open" eq 0

			mesg writ targ 0

		endi

		targ ownr

		reps 5

			mvby 0 -4

		repe

		part 4

		frat 3

		anim [0 1 2 3 2 1 255]

		snde "sub1"

		setv velx -2.5

		loop

			wait 1

			gsub breathe

			gsub breathe

		untl posl le 8120

		snde "sub2"

		part 5

		frat 3

		anim [0 1 2 3 2 1 255]

		setv velx 0

		setv vely -5

		loop

			wait 1

			gsub breathe

			gsub breathe

		untl posb le 48750

		setv vely -2.5

		snde "sub3"

		loop

			wait 1

			gsub breathe

			gsub breathe

		untl posb le 48693

		setv vely 0

		setv velx 5

		snde "sub2"

		part 4

		pose 0

		loop

			wait 1

			gsub breathe

			gsub breathe

		untl posr ge 9100

		setv velx 2.5

		snde "sub1"

		loop

			wait 1

			gsub breathe

			gsub breathe

		untl posr ge 9404

		setv velx 0

		part 4

		frat 3

		anim [0 1 2 3 2 1 255]

		setv vely -2.5

		snde "sub3"

		loop

			wait 1

			gsub breathe

			gsub breathe

		untl posb le 48598

		setv vely 0

		part 5

		pose 0

		part 4

		pose 0

		fade

		setv ov00 0

		targ ownr

		epas 4 0 0
			stim writ targ 96 0
			driv 19 -1.0
		next

		dpas 4 0 0

		attr 28

		etch 4 0 0

			setv vely -10

		next



	retn

endm


**Almost the same, diff direction.
scrp 3 1 50202 1002

	lock

	doif ov00 eq 0

		gsub right_to_bottom

	elif ov00 eq 1

		gsub left_to_right

	elif ov00 eq 2

		gsub bottom_to_left

	endi
	inst
*There's still passengers!	
	doif totl 3 13 50202 gt 0
		setv va00 0
		doif ov00 eq 0
*Your on the right, go left
			setv va00 1
		elif ov00 eq 1
*Your on the left, go right
			setv va00 2
		elif ov00 eq 2
*Your on the bottom, see if the left or right has more passangers
			setv va12 0
			setv va13 0
			enum 3 13 50202
				doif ov00 eq 0
					addv va12 1
				else
					addv va13 1
				endi
			next
**If equal go random
			doif va12 eq va13
				setv va00 rand 1 2
**More passangers on the left
			elif va12 gt va13
				setv va00 2
**More passangers on the right
			elif va13 gt 12
				setv va00 1
			endi
		endi
	endi
	enum 3 12 50202
			pose 0
	next
	unlk
* Do 1001
	doif va00 eq 1
		mesg writ ownr 1001
* Do 1002
	elif va00 eq 2
		mesg writ ownr 1002
	endi

	stop



	subr breathe

		epas 4 0 0

			chem 29 1

			stim writ targ 75 1

			stim writ targ 96 0
		next

		targ ownr

	retn



	subr right_to_bottom

		part 3

		frat 2

		anim [0 1 0 1 0 1 0]

		over

		targ ownr

		doif from eq pntr
			gpas 4 0 0 1
		endi

		rtar 2 2 50202

		doif name "open" eq 0

			mesg writ targ 0

		endi

		targ ownr

		part 4

		frat 3

		anim [0 1 2 3 2 1 255]

		part 5

		frat 3

		anim [0 1 2 3 2 1 255]

		setv vely 2.5

		snde "sub1"

		loop

			wait 1

			gsub breathe

			gsub breathe

		untl posb ge 48700

		setv vely 0

		part 5

		pose 0

		setv velx -5

		snde "sub3"

		loop

			wait 1

			gsub breathe

			gsub breathe

		untl posl le 8225

		setv velx -2.5

		snde "sub2"

		loop

			wait 1

			gsub breathe

			gsub breathe

		untl posl le 8125

		setv velx 0

		part 5

		frat 3

		anim [0 1 2 3 2 1 255]

		setv vely 5

		snde "sub3"

		loop

			wait 1

			gsub breathe

			gsub breathe

* bottom slow down

		untl posb ge 48830

		setv vely 2.5

		snde "sub3"

		loop

			wait 1

			gsub breathe

* bottom stop

		untl posb ge 49030

		setv vely 0

		part 4

		pose 0

		setv velx 5

		snde "sub1"

		loop

			wait 1

			gsub breathe

		untl posr ge 8550

		setv velx 2.5

		snde "sub3"

		loop

			wait 1

			gsub breathe

		untl posr ge 8720

		setv velx 0

		part 5

		pose 0

		setv ov00 1

		rtar 2 2 50203

		mesg writ targ 0

		wait 20

		targ ownr

		fade

		reps 5

			mvby 0 4

		repe
		epas 4 0 0
			stim writ targ 96 0
			driv 19 -1.0
		next
		dpas 4 0 0

		attr 28

		setv ov00 2

	retn



	subr left_to_right

		inst
* Get the queued creatures
		enum 3 13 50202
			doif ov00 eq 0
				doif ooww ov01 eq 3
					
					* spas takes some time to work, so loop
					* and keep checking if you got a creature
					* before continuing
					loop
						spas ownr mtoc ov01
						wait 1
						addv va46 1
						seta va45 targ
						targ ownr
						epas 4 0 0
							addv va44 1
						next
						targ va45
					untl va44 gt 0 or ooww ov01 ne 3 

					kill targ
				else
					kill targ
				endi
			endi
		next
		slow
		part 3

		frat 2

		anim [0 1 0 1 0 1 0]

		over

		targ ownr

		doif from eq pntr
			gpas 4 0 0 1
		endi

		part 5

		frat 3

		anim [0 1 2 3 2 1 255]

		part 4

		frat 3

		anim [0 1 2 3 2 1 255]

		setv vely 2.5

		snde "sub3"

		loop

			wait 1

			gsub breathe

		untl posb ge 48700

		setv vely 0

		part 4

		pose 0

		setv velx 5

		snde "sub1"

		loop

			wait 1

			gsub breathe

		untl posr ge 9100

		setv velx 2.5

		snde "sub2"

		loop

			wait 1

			gsub breathe

		untl posr ge 9404

		setv velx 0

		part 5

		frat 3

		anim [0 1 2 3 2 1 255]

		setv vely -2.5

		snde "sub3"

		loop

			wait 1

			gsub breathe

		untl posb le 48598

		setv vely 0

		fade

		part 5

		pose 0

		part 4

		pose 0

		targ ownr

		epas 4 0 0
			stim writ targ 96 0
			driv 19 -1.0
		next

		dpas 4 0 0

		setv ov00 0

		attr 28

		etch 4 0 0

			setv vely -10

		next



	retn



	subr bottom_to_left

		part 3

		frat 2

		anim [0 1 0 1 0 1 0]

		over

		targ ownr

		doif from eq pntr
			gpas 4 0 0 1
		endi

		rtar 2 2 50202

		doif name "open" eq 0

			mesg writ targ 0

		endi

		targ ownr

		gpas 4 0 0 1

		reps 5

			mvby 0 -4

		repe

		part 4

		frat 3

		anim [0 1 2 3 2 1 255]

		setv velx -2.5

		snde "sub1"

		loop

			wait 1

			gsub breathe

			gpas 4 0 0 1

		untl posl le 8120

		setv velx 0

		targ ownr

		part 5

		frat 3

		anim [0 1 2 3 2 1 255]

		setv vely -5

		snde "sub2"

		loop

			wait 1

			gsub breathe

		untl posb le 48600

		setv vely -2.5

		snde "sub3"

		loop

			wait 1

			gsub breathe

		untl posb le 48600

		fade

		part 4

		pose 0

		part 5

		pose 0

		etch 4 0 0

			reps 5

				mvby 0 -2

			repe

		next

		targ ownr

		epas 4 0 0
			stim writ targ 96 0
			driv 19 -1.0
		next

		dpas 4 0 0

		setv vely 0

		setv ov00 1

		attr 28

		etch 4 0 0

			setv vely -10

		next

	retn

endm

rscr
enum 3 12 50202
	kill targ
next
enum 3 13 50202
	kill targ
next
enum 3 1 50202

	kill targ

next

scrx 3 1 50202 1001
